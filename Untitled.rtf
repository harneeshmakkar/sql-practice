{\rtf1\ansi\ansicpg1252\cocoartf2639
\cocoatextscaling0\cocoaplatform0{\fonttbl\f0\fswiss\fcharset0 Helvetica-Bold;\f1\fswiss\fcharset0 Helvetica;}
{\colortbl;\red255\green255\blue255;\red0\green0\blue0;\red123\green221\blue55;\red255\green255\blue11;
\red252\green9\blue7;}
{\*\expandedcolortbl;;\cssrgb\c0\c1\c1;\cssrgb\c54133\c87606\c27652;\cssrgb\c100000\c100000\c0;
\cssrgb\c100000\c15764\c0;}
\paperw11900\paperh16840\margl1440\margr1440\vieww38200\viewh21600\viewkind0
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardirnatural\partightenfactor0

\f0\b\fs62 \cf2 SQL Practice Questions:
\f1\b0\fs38 \cf0 \
\
\cf3 1. Assume you're given a table Twitter tweet data, write a query to obtain a histogram of tweets posted per user in 2022. Output the tweet count per user as the bucket and the number of Twitter users who fall into that bucket.\
\
In other words, group the users by the number of tweets they posted in 2022 and count the number of users in each group.\
\cf0 \
\cf4 SELECT tweet_count_per_user AS tweet_bucket,\
COUNT (user_id) AS users_num \
FROM \
\
(\
SELECT user_id,COUNT(tweet_id) AS tweet_count_per_user\
FROM tweets\
WHERE tweet_date BETWEEN '2022-01-01' AND '2022-12-31'\
GROUP BY user_id) \
\
AS total_tweets\
\
GROUP BY tweet_count_per_user;\
\
\
\cf3 2. Given a table of candidates and their skills, you're tasked with finding the candidates best suited for an open Data Science job. You want to find candidates who are proficient in Python, Tableau, and PostgreSQL.\
\
Write a query to list the candidates who possess all of the required skills for the job. Sort the output by candidate ID in ascending order.\
\
\cf4 SELECT DISTINCT(candidate_id)\
FROM candidates\
WHERE skill IN ('Python' , 'Tableau' , 'PostgreSQL')\
GROUP BY candidate_id\
HAVING COUNT(skill) = 3\
ORDER BY candidate_id DESC;\
\cf3 \
\
3. Assume you're given two tables containing data about Facebook Pages and their respective likes (as in "Like a Facebook Page").\
\
Write a query to return the IDs of the Facebook pages that have zero likes. The output should be sorted in ascending order based on the page IDs.\
\
\cf4 SELECT page_id FROM pages\
EXCEPT \
SELECT page_id FROM page_likes\
ORDER BY page_id;\
\
\cf5 Note: Using the EXCEPT operator, we subtract the page IDs with likes from the initial set of all page IDs. The resulting query will give us the IDs of the Facebook pages that do not possess any likes.\
\
\
\cf3 4. Tesla is investigating production bottlenecks and they need your help to extract the relevant data. Write a query to determine which parts have begun the assembly process but are not yet finished.\
\
Assumptions:\
\
parts_assembly table contains all parts currently in production, each at varying stages of the assembly process.\
An unfinished part is one that lacks a finish_date.\
\
\cf4 SELECT part, assembly_step FROM parts_assembly\
WHERE finish_date IS NULL;\
\
\cf3 \
5. Assume you're given the table on user viewership categorised by device type where the three types are laptop, tablet, and phone.\
\
Write a query that calculates the total viewership for laptops and mobile devices where mobile is defined as the sum of tablet and phone viewership. Output the total viewership for laptops as laptop_reviews and the total viewership for mobile devices as mobile_views.\
\cf4 \
SELECT \
\
COUNT(*) FILTER (WHERE device_type = 'laptop') AS laptop_views,\
COUNT(*) FILTER (WHERE device_type IN ('phone', 'tablet')) AS mobile_views\
\
FROM viewership;\
\
\
\cf3 6. Given a table of Facebook posts, for each user who posted at least twice in 2021, write a query to find the number of days between each user\'92s first post of the year and last post of the year in the year 2021. Output the user and number of the days between each user's first and last post.\
\cf4 \
First, we can use the MIN() and MAX() aggregate functions on the post_date column to retrieve the earliest and latest post dates, and substract one from another accordingly.\
\
To calculate the difference for each user, we GROUP the results by user_id, and then filter for posts made in the year 2021. To do so, we use the DATE_PART() function to extract the year from the post_date column.\
\
In the final step, to exclude users who have posted only once during the year, we apply the HAVING clause with a COUNT() condition greater than 1.\
\
SELECT user_id, MAX(post_date::DATE) - MIN(post_date::DATE) AS days_between\
FROM posts\
WHERE DATE_PART('year', post_date::DATE) = '2021'\
GROUP BY user_id\
HAVING COUNT(post_id) >1;\
\
\cf3 \
7. Write a query to identify the top 2 Power Users who sent the highest number of messages on Microsoft Teams in August 2022. Display the IDs of these 2 users along with the total number of messages they sent. Output the results in descending order based on the count of the messages.\
\cf4 \
SELECT sender_id, COUNT(message_id) AS message_count\
FROM messages\
WHERE EXTRACT(MONTH FROM sent_date) = '8'\
AND EXTRACT(YEAR FROM sent_date) = '2022'\
GROUP BY sender_id\
ORDER BY message_count DESC\
LIMIT 2;\
\
\
\cf3 8. Assume you're given a table containing job postings from various companies on the LinkedIn platform. Write a query to retrieve the count of companies that have posted duplicate job listings.\
\cf4 \
Definition:\
\
Duplicate job listings are defined as two job listings within the same company that share identical titles and descriptions.\
\
WITH job_count_cte AS (\
\
SELECT company_id, title, description, count(job_id) AS job_count\
FROM job_listings\
GROUP BY company_id, title,description\
\
)\
\
SELECT count(DISTINCT(company_id)) \
FROM job_count_cte\
WHERE job_count >1;\
\
\
\cf3 9. Assume you're given the tables containing completed trade orders and user details in a Robinhood trading system.\
\cf4 \
Write a query to retrieve the top three cities that have the highest number of completed trade orders listed in descending order. Output the city name and the corresponding number of completed trade orders.\
\
SELECT users.city, COUNT(trades.order_id) AS total_orders  \
FROM trades\
INNER JOIN users\
ON users.user_id = trades.user_id\
WHERE trades.status = 'Completed'\
GROUP BY users.city\
ORDER BY total_orders DESC\
LIMIT 3;\
\
\
\cf3 10. Given the reviews table, write a query to retrieve the average star rating for each product, grouped by month. The output should display the month as a numerical value, product ID, and average star rating rounded to two decimal places. Sort the output first by month and then by product ID.\
\cf4 \
SELECT EXTRACT(MONTH FROM submit_date) AS mth,\
product_id, \
ROUND(AVG(stars), 2) AS avg_stars\
FROM reviews\
GROUP BY mth, product_id\
ORDER BY mth, product_id;\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
}